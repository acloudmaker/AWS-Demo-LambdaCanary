// lib/pipeline-stack.ts

import * as cdk from '@aws-cdk/core';
import s3 = require('@aws-cdk/aws-s3');
import codecommit = require('@aws-cdk/aws-codecommit');
import codepipeline = require('@aws-cdk/aws-codepipeline');
import codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');
import codebuild = require('@aws-cdk/aws-codebuild');

export class PipelineStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // The code that defines the stack goes here. CodePipeline will use this bucket to pass artifacts to the downstream jobs and its also where SAM will upload the artifacts during the build process
    const artifactsBucket = new s3.Bucket(this, "ArtifactsBucket");
  }

  // Declare source code as an artifact. This is necessary for any files that the CodePipeline needs to pass to downstream stages.
  const sourceOutput = new codepipeline.Artifact();

  // Add source stage to pipeline. This stage is in charge of triggering the pipeline based on new code changes (i.e. git push or pull requests). AWS CodeCommit is used as the source provider here, but CodePipeline also supports S3, GitHub and Amazon ECR as source providers.
  pipeline.addStage({
    stageName: 'Source',
    actions: [
      new codepipeline_actions.CodeCommitSourceAction({
	actionName: 'CodeCommit_Source',
	repository: codeRepo,
	output: sourceOutput,
      }),
    ],
  });

  // Declare build output as artifacts
  const buildOutput = new codepipeline.Artifact();

  // Declare a new CodeBuild project. The Build Stage is where the Serverless application is built and packaged by SAM. AWS CodeBuild is used as the Build provider for tthe pipeline but CodePipeline also supports other providers like Jenkins, TeamCity or CloudBees.
  const buildProject = new codebuild.PipelineProject(this, 'Build', {
    environment: { buildImage: codebuild.LinuxBuildImage.AMAZON_LINUX_2_2 },
    environmentVariables: {
      'PACKAGE_BUCKET': {
	value: artifactsBucket.bucketName
      }
    }
  });

  // Add the build stage to the pipeline
  pipeline.addStage({
    stageName: 'Build',
    actions: [
      new codepipeline_actions.CodeBuildAction({
	actionName: 'Build',
	project: buildProject,
	input: sourceOutput,
	outputs: [buildOutput],
      }),
    ],
  });

  // Add the deploy stage to the pipelne. The Deploy Stage is where the SAM application and all its resources are created in an AWS account. The most common way to do this is by using CloudFormation ChangeSets to deploy. This means that this stage will have 2 actions: the CreateChangeSet and the ExecuteChangeSet.
  pipeline.addStage({
    stageName: 'Dev',
    actions: [
      new codepipeline_actions.CloudFormationCreateReplaceChangeSetAction({
        actionName: 'CreateChangeSet',
        templatePath: buildOutput.atPath("packaged.yaml"),
        stackName: 'sam-app',
        adminPermissions: true,
        changeSetName: 'sam-app-dev-changeset',
        runOrder: 1
      }),
      new codepipeline_actions.CloudFormationExecuteChangeSetAction({
	actionName: 'Deploy',
	stackName: 'sam-app',
	changeSetName: 'sam-app-dev-changeset',
	runOrder: 2
      }),
    ],
  });

}
